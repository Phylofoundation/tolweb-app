/*
 * Created on Feb 24, 2005
 *
 * TODO To change the template for this generated file go to
 * Window - Preferences - Java - Code Style - Code Templates
 */
package org.tolweb.misc;

import java.util.Collection;
import java.util.Iterator;
import java.util.List;

import org.tolweb.dao.ImageDAO;
import org.tolweb.dao.PageDAO;
import org.tolweb.hibernate.MappedPage;
import org.tolweb.hibernate.TitleIllustration;
import org.tolweb.tapestry.EditTitleIllustrations;
import org.tolweb.treegrow.main.ImageVersion;
import org.tolweb.treegrow.main.NodeImage;

/**
 * @author dmandel
 *
 * TODO To change the template for this generated type comment go to
 * Window - Preferences - Java - Code Style - Code Templates
 */
public class TitleIllustrationVersionPicker {
    private ImageDAO imageDAO;
    private PageDAO pageDAO;
    
    public void adjustVersionsForPage(MappedPage page) {
        int heightToChoose = 0;        
        if (page.getTitleIllustrationHeight() == EditTitleIllustrations.TOL_DEFAULT_SELECTION) {
            if (page.getMappedNode().getIsLeaf()) {
                heightToChoose = 300;
            } else {
                heightToChoose = 250;
            }
        } else if (page.getTitleIllustrationHeight() == EditTitleIllustrations.BRANCH_DEFAULT_SELECTION) {
            heightToChoose = getPageDAO().getTitleIllustrationBranchDefaultHeight(page);
        }
        int versionHeight = getMaxPossibleHeightForIllustrations(page, heightToChoose);
        // Go through all images and reset the versions they point to
        resetImageVersions(page, versionHeight);
        getPageDAO().savePage(page);
    }
    @SuppressWarnings("unchecked")
    public ImageVersion getVersionWithHeight(Collection versions, int height) {
        for (Iterator iterator = versions.iterator(); iterator.hasNext();) {
            ImageVersion version = (ImageVersion) iterator.next();
            if (version.getHeight().intValue() == height) {
                return version;
            }
        }
        return null;
    }
    
    /**
     * Goes through all of the illustrations and verifies that is is possible to get a max-height
     * of the desired height.  If not, it returns highest autogenerated height that all images
     * support
     * @param desiredHeight
     * @return The actual height to use
     */
    @SuppressWarnings("unchecked")
    private int getMaxPossibleHeightForIllustrations(MappedPage page, int desiredHeight) {
        int maxSupportedHeight = desiredHeight;
        for (Iterator iter = page.getTitleIllustrations().iterator(); iter.hasNext();) {
            TitleIllustration nextIllustration = (TitleIllustration) iter.next();
            NodeImage img = nextIllustration.getVersion().getImage();
            int imgMaxHeight = getImageDAO().getMaxAllowedVersionHeight(img.getId());
            /*List versions = getImageDAO().getVersionsForImage(img);
             * int currentMaxHeight = 0;
            for (Iterator iterator = versions.iterator(); iterator.hasNext();) {
                ImageVersion version = (ImageVersion) iterator.next();
                int currentVersionHeight = version.getHeight().intValue(); 
                if (currentVersionHeight > currentMaxHeight && currentVersionHeight <= imgMaxHeight) {
                    currentMaxHeight = version.getHeight().intValue();
                }
            }*/
            if (imgMaxHeight < maxSupportedHeight) {
                maxSupportedHeight = imgMaxHeight;
            }
        }
        // If it's not at an automatic height, make it one
        if (maxSupportedHeight % 50 != 0) {
            maxSupportedHeight -= maxSupportedHeight % 50;
        }
        return maxSupportedHeight;
    }
    
    /**
     * Goes through all of the illustrations and set them to point to the autogenerated
     * version of the specified height
     * @param page
     * @param height
     */
    @SuppressWarnings("unchecked")
    private void resetImageVersions(MappedPage page, int height) {
        for (Iterator iter = page.getTitleIllustrations().iterator(); iter.hasNext();) {
            TitleIllustration nextIllustration = (TitleIllustration) iter.next();
            List versions = getImageDAO().getVersionsForImage(nextIllustration.getVersion().getImage());
            ImageVersion version = getVersionWithHeight(versions, height);
            nextIllustration.setVersion(version);
        }
    }
    
    /**
     * @return Returns the imgDAO.
     */
    public ImageDAO getImageDAO() {
        return imageDAO;
    }
    /**
     * @param imgDAO The imgDAO to set.
     */
    public void setImageDAO(ImageDAO imgDAO) {
        this.imageDAO = imgDAO;
    }
    /**
     * @return Returns the pageDAO.
     */
    public PageDAO getPageDAO() {
        return pageDAO;
    }
    /**
     * @param pageDAO The pageDAO to set.
     */
    public void setPageDAO(PageDAO pageDAO) {
        this.pageDAO = pageDAO;
    }
}
