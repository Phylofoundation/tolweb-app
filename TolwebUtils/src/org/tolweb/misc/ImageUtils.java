/*
 * ImageUtils.java
 *
 * Created on May 2, 2004, 1:26 PM
 */

package org.tolweb.misc;

import java.awt.Dimension;
import java.io.InputStream;
import java.util.List;
import java.util.Map;

import org.apache.tapestry.request.IUploadFile;
import org.tolweb.hibernate.Movie;
import org.tolweb.hibernate.Specimen;
import org.tolweb.treegrow.main.Contributor;
import org.tolweb.treegrow.main.ImageVersion;
import org.tolweb.treegrow.main.NodeImage;

/**
 * Interface for writing out various images and media to disk
 * Also keeps track of path locations and such -- configured in
 * Spring applicationContext.xml which reads from dbconnection.properties
 * 
 * Version sizing is currently done using ImageMagick's 'convert' utility
 * and is expected to be located at /usr/local/bin/convert (though this
 * is configurable)
 * @author  dmandel
 */
public interface ImageUtils {
    public String stripSlashesFromFilename(String filename);
    public String getUniqueServerFilename(String clientFilename);    
    public String getUniqueServerFilename(String serverDirectory, String clientFilename);
    public String writeImageFileToDisk(IUploadFile imageFile, String directory);
    /**
     * Takes the version and writes its contents out to disk.  Also sets the
     * filename and file size of the version in the process.
     * @param version
     */
    public void writeVersionToDisk(ImageVersion version);
    /**
     * Tries to grab the first frame of the movie and write it to disk
     * If successful, then also writes a thumbnail with the play icon in it
     * Returns a list containing two Versions, the first is the master version
     * (needed to store the width and height of the movie for playing) and
     * the second is the thumbnail
     * @param movie
     * @return
     */
    public List writeMovieFilesToDisk(Movie movie);
    public String getFlashVideoFilename(Movie movie);
    public String getFlashVideoUrl(Movie movie);
    public String getImageVersionFilename(String originalFilename, int height);
    public String getUrlForVersion(ImageVersion version);
    public String getFileSizeStringFromInt(int numBytes);
    public void setImagesDirectory(String dir);
    public String getImagesDirectory();
    public void setThumbsDirectory(String dir);
    public String getThumbsDirectory();
    
    public void setContributorsImagesDirectory(String value);
    public String getContributorsImagesDirectory();    
    public void setContributorsUrlPrefix(String value);
    public String getContributorsUrlPrefix();
	public String getContributorImageUrl(Contributor contr);
	public String getContributorImageUrl(Contributor contr, boolean includeFullURL);
    
    public void setSpecimensImagesDirectory(String value);
    public String getSpecimensImagesDirectory();    
    public void setSpecimensUrlPrefix(String value);
    public String getSpecimensUrlPrefix();
    public String getSpecimenImageUrl(Specimen specimen);    
    
    public void setUrlPrefix(String urlPrefix);
    public String getUrlPrefix();
    public void setThumbnailUrlPrefix(String thumbUrlPrefix);
    public String getThumbnailUrlPrefix();    
    public void setMovieThumbnailUrl(String url);
    public String getMovieThumbnailUrl();   
    public void setSoundThumbnailUrl(String url);
    public String getSoundThumbnailUrl();
    public void setDefaultThumbnailHeight(int height);
    public int getDefaultThumbnailHeight();
    public String getServerFileLocation(NodeImage img);
    public String getServerFileLocation(ImageVersion version);
    public String getServerThumbnailFileLocation(NodeImage img, boolean isPreview);
    public String writeImageFileToDisk(IUploadFile imageFile);
    public String writeInputStreamToDisk(InputStream stream, String filename);
    public String getImageUrl(NodeImage img);
    public String getMediaUrl(int mediaType, String location);
    public String getVersionUrl(ImageVersion version);
    public String getImageThumbnailUrl(NodeImage img, boolean isPreview);
    public void setImagesServerPrefix(String value);
    public String getImagesServerPrefix();
    public void copyPreviewThumbnailToActualThumbnail(NodeImage img);
    public void copyActualThumbailToPreviewThumbnail(NodeImage img);
    public Dimension getImageDimensions(NodeImage img);
    public Dimension getVersionDimensions(ImageVersion version);
    public int getVersionFilesize(ImageVersion version);
    public void deleteVersionFromFilesystem(ImageVersion version);
    public int calculateWidthForVersionHeight(NodeImage img, int height);
    public int getClosestAutogeneratedVersionHeight(int height);
    /**
     * Ensures that any autogenerated versions will be created and/or removed for the 
     * specified image.  This will generate a master image version if the list parameter
     * has no items.
     * @param img
     * @param versions
     * @return The list of image versions that were removed due to them being larger
     * 		   than a smaller master version
     */
    public List reinitializeAutogeneratedVersions(NodeImage img, List versions);
    public void setColorProfilePath(String value);
    public String getColorProfilePath();
    
    /**
     * Writes out all objects in the zip file to the images directory
     * @param file
     * @return A map of filenames -- keys are filenames as they were in the zip, values
     * are filenames as they got written to the server
     */
    public Map createImagesFromZip(IUploadFile file);
    public String getJavascriptViewImageWindowFeatures(int width, int height);
    public Dimension getImageInfoWindowSize(int imageWidth, int imageHeight);
}
