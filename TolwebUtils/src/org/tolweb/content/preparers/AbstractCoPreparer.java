package org.tolweb.content.preparers;

import java.util.Set;

import nu.xom.Element;

import org.tolweb.content.helpers.DaoBundle;
import org.tolweb.hibernate.MappedPage;
import org.tolweb.treegrow.main.NodeImage;
import org.tolweb.treegrow.main.StringUtils;

/**
 * Defines common functionality of a sub-preparer object and implements the
 * ContentCoPreparer interface. The "Co" is used to indicate that these classes
 * are being used by another parent preparer. Derived classes will fill the role
 * of sub-preparers in the overall content aggregation generation process
 * (defined by the content web services).
 * 
 * @author lenards
 * 
 */
public abstract class AbstractCoPreparer implements ContentCoPreparer {

	private MappedPage mpage;
	@SuppressWarnings("unchecked")
	private Set contributors;
	private NodeImage mediafile;
	private DaoBundle dao;
	private Element parentElement;
	private Element preparedElement;
	private String preparerNamespace;

	/**
	 * Set the source of content to be used
	 */
	public abstract void setContentSource(Object payload, DaoBundle daos,
			Element parentElement);

	/**
	 * Generate the content modeled by the content source.
	 * 
	 * Executing the content processing will generate a a preparedElement that
	 * is a child of the parentElement (indicated when the content source was
	 * set on the sub-preparer).
	 */
	public abstract void processContent();

	/**
	 * Returns a safe string value.
	 * 
	 * If the argument is not empty (which also means the string is not null),
	 * it will return the argument. Otherwise, the empty string will be
	 * returned. This means that operations on the argument can be safely
	 * performed without fear of NullPointerExceptions.
	 * 
	 * Developer Note: Empty strings will not necessarily be "safe" when
	 * generating XML.
	 * 
	 * XML attributes that are empty will cause exceptions in the XOM framework
	 * (which is used to generate the content aggregation XML, XOM stands for
	 * XML Object Model - http://xom.nu/).
	 * 
	 * @param firstOnline
	 *            the string representation to test
	 * @return a guaranteed non-null string representation
	 */
	protected String getSafeString(String firstOnline) {
		return StringUtils.notEmpty(firstOnline) ? firstOnline : "";
	}

	/**
	 * Returns a safe string representation of an object instance.
	 * 
	 * If the argument is not null, the toString() method will be called.
	 * Otherwise, the empty string will be returned. This means that operations
	 * on the argument can be safely performed without fear of
	 * NullPointerExceptions.
	 * 
	 * @param obj
	 *            the object representation to test
	 * @return a guaranteed non-null string representation of the argument
	 */
	protected String safeToString(Object obj) {
		return obj != null ? obj.toString() : "";
	}

	/**
	 * Returns the element generated by processing the content source.
	 * 
	 * This element may be referred to as the "prepared" element in various
	 * documentation.
	 * 
	 * @return an element object representing the XML for the content source.
	 */
	public Element getElement() {
		return preparedElement;
	}

	/**
	 * Gets the mapped page the content is referring.
	 * 
	 * @return a reference to the mapped page associated with the content
	 *         source.
	 */
	protected MappedPage getMappedPage() {
		return mpage;
	}

	/**
	 * Sets the mapped page to the argument
	 * 
	 * @param mpage
	 */
	protected void setMappedPage(MappedPage mpage) {
		this.mpage = mpage;
	}

	/**
	 * Returns the parent of the prepared element within the XML document. 
	 * 
	 * @return an element object representing the parent of the prepared element
	 * 
	 * @see getElement()
	 * @see getPreparedElement()
	 */
	protected Element getParentElement() {
		return parentElement;
	}

	/**
	 * Sets the parent element to the argument 
	 * 
	 * @param parentElement
	 */
	protected void setParentElement(Element parentElement) {
		this.parentElement = parentElement;
	}

	/**
	 * Returns the element generated by processing the content source.
	 * 
	 * @return an element object representing the XML for the content source.
	 */
	protected Element getPreparedElement() {
		return preparedElement;
	}

	protected void setPreparedElement(Element preparedElement) {
		this.preparedElement = preparedElement;
	}

	/**
	 * Gets the data source bundle. 
	 * @return an object representing all the data access objects needed to 
	 * perform work 
	 */
	public DaoBundle getDaoBundle() {
		return dao;
	}

	/**
	 * Sets the data source bundle to the argument.
	 * @param dao
	 */
	public void setDaoBundle(DaoBundle dao) {
		this.dao = dao;
	}

	/**
	 * Gets a set containing the contributors associated with the content. 
	 * 
	 * @return a set containing contributors associated with the content.
	 */
	@SuppressWarnings("unchecked")
	public Set getContributors() {
		return contributors;
	}

	/**
	 * Sets the collection of contributors associated with the content.
	 * @param contributors
	 */
	@SuppressWarnings("unchecked")
	public void setContributors(Set contributors) {
		this.contributors = contributors;
	}

	/**
	 * Returns a string representing the URI namespace for the prepared 
	 * element. 
	 * 
	 * @return a string representing the URI namespace of the prepared 
	 * element
	 */
	protected String getPreparerNamespace() {
		return preparerNamespace;
	}

	/**
	 * Sets the URI namespace for the prepared element to the argument
	 * @param preparerNamespace
	 */
	protected void setPreparerNamespace(String preparerNamespace) {
		this.preparerNamespace = preparerNamespace;
	}

	/**
	 * Gets the media file associated with the content.
	 * 
	 * @return
	 */
	protected NodeImage getMediaFile() {
		return mediafile;
	}

	/**
	 * Sets the media file to the argument 
	 * @param mediafile
	 */
	protected void setMediaFile(NodeImage mediafile) {
		this.mediafile = mediafile;
	}
}
